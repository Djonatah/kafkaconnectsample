services:
  in-db:
    image: mcr.microsoft.com/mssql/server:2022-preview-ubuntu-22.04
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "Password123#"
    ports:
      - "1433:1433"
    networks:
      - app-tier
    healthcheck:
      test: [ "CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${Sa_Password:-Password123#} -Q 'SELECT 1' || exit 1" ]
      interval: 10s
      retries: 10
      start_period: 10s
      timeout: 3s
  start-in-db:
    image: mcr.microsoft.com/mssql/server:2022-preview-ubuntu-22.04
    depends_on:
      in-db:
        condition: service_healthy
    networks:
      - app-tier
    volumes:
      - ./in_db_init:/home/script
    command:
      - bash
      - -c
#      - cat /home/script/init.sql
#      - echo "finishing cat"
      - /opt/mssql-tools/bin/sqlcmd -S in-db -U sa -P Password123# -d master -i /home/script/init.sql
  kafka:
    build: .
    depends_on:
      - start-in-db
    networks:
      - app-tier
    ports:
      - '9092:9092'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  kafka-connect:
    build: .
    depends_on:
      - kafka
    networks:
      - app-tier
    ports:
      - '8083:8083'
    command: /opt/bitnami/kafka/bin/connect-standalone.sh /opt/bitnami/kafka/config/connect-standalone.properties
  kafka_connect_config:
    image: ubuntu:latest
    networks:
      - app-tier
    depends_on:
    - kafka-connect
    command:
      - bash
      - -c
      - |
        echo "Waiting for Kafka to be ready"
        apt-get update
        apt-get install -y curl
        while : ; do
          curl_status=$$(curl -s -o /dev/null -w "%{http_code}" kafka-connect:8083/connectors)
          echo "$$(date) Kafka Connect HTTP state: $$curl_status (waiting for 200)"
          if [ $$curl_status -eq 200 ]; then
            break
          fi
          sleep 5
        done

        echo "Registering debezium mssqlserver  connector"
        curl -s -X POST -H  "Content-Type: application/json" kafka-connect:8083/connectors \
        -d '{
              "name": "client-table-connector",
              "config": {
                "connector.class": "io.debezium.connector.sqlserver.SqlServerConnector",
                "database.hostname": "in-db",
                "database.port": "1433",
                "database.user": "sa",
                "database.password": "Password123#",
                "database.names": "test_producer",
                "database.trustServerCertificate": true,
                "topic.prefix": "data_producer_stream",
                "table.include.list": "dbo.client",
                "schema.history.internal.kafka.bootstrap.servers": "kafka:9092"        
              }
            }'
#
#        echo "Registering debezium jdbc sink connector"
#        curl -s -X PUT -H  "Content-Type:application/json" kafka:8083/connectors/client-table-connector/config \
#        -d '{
#            "name": "mssql-jdbc-connector",
#            "config": {
#              "connector.class": "io.debezium.connector.jdbc.JdbcSinkConnector",
#              "tasks.max": "1",
#              "connection.url": "jdbc:sqlserver://localhost:14331/data_reader",
#              "connection.username": "sa",
#              "connection.password": "Access1234#",
#              "insert.mode": "upsert",
#              "delete.enabled": "true",
#              "primary.key.mode": "record_key",
#              "schema.evolution": "basic",
#              "database.time_zone": "UTC",
#              "topics": "data_producer_stream"
#            }
#          }'
#
#        sleep infinity
#  kafka-ui:
#    image: provectuslabs/kafka-ui
#    networks:
#      - app-tier
#    environment:
#      KAFKA_CLUSTERS_0_NAME: local
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
#    ports:
#      - '8080:8080'
#    depends_on:
#      - kafka
networks:
  app-tier:
    driver: bridge